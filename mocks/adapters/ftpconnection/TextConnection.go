// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TextConnection is an autogenerated mock type for the TextConnection type
type TextConnection struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *TextConnection) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cmd provides a mock function with given fields: format, args
func (_m *TextConnection) Cmd(format string, args ...interface{}) (uint, error) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string, ...interface{}) uint); ok {
		r0 = rf(format, args...)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(format, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadResponse provides a mock function with given fields: expectedCode
func (_m *TextConnection) ReadResponse(expectedCode int) (int, string, error) {
	ret := _m.Called(expectedCode)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(expectedCode)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(expectedCode)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(expectedCode)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewTextConnection interface {
	mock.TestingT
	Cleanup(func())
}

// NewTextConnection creates a new instance of TextConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTextConnection(t mockConstructorTestingTNewTextConnection) *TextConnection {
	mock := &TextConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
