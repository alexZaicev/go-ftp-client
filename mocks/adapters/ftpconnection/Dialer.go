// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	net "net"

	tls "crypto/tls"
)

// Dialer is an autogenerated mock type for the Dialer type
type Dialer struct {
	mock.Mock
}

// Dial provides a mock function with given fields: network, address
func (_m *Dialer) Dial(network string, address string) (net.Conn, error) {
	ret := _m.Called(network, address)

	var r0 net.Conn
	if rf, ok := ret.Get(0).(func(string, string) net.Conn); ok {
		r0 = rf(network, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(network, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DialContext provides a mock function with given fields: ctx, network, address
func (_m *Dialer) DialContext(ctx context.Context, network string, address string) (net.Conn, error) {
	ret := _m.Called(ctx, network, address)

	var r0 net.Conn
	if rf, ok := ret.Get(0).(func(context.Context, string, string) net.Conn); ok {
		r0 = rf(ctx, network, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, network, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DialContextTLS provides a mock function with given fields: ctx, network, address, tlsConfig
func (_m *Dialer) DialContextTLS(ctx context.Context, network string, address string, tlsConfig *tls.Config) (net.Conn, error) {
	ret := _m.Called(ctx, network, address, tlsConfig)

	var r0 net.Conn
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *tls.Config) net.Conn); ok {
		r0 = rf(ctx, network, address, tlsConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *tls.Config) error); ok {
		r1 = rf(ctx, network, address, tlsConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDialer interface {
	mock.TestingT
	Cleanup(func())
}

// NewDialer creates a new instance of Dialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDialer(t mockConstructorTestingTNewDialer) *Dialer {
	mock := &Dialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
