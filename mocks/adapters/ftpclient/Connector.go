// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	connection "github.com/alexZaicev/go-ftp-client/internal/domain/connection"

	ftpclient "github.com/alexZaicev/go-ftp-client/internal/adapters/ftpclient"

	mock "github.com/stretchr/testify/mock"
)

// Connector is an autogenerated mock type for the Connector type
type Connector struct {
	mock.Mock
}

// Connect provides a mock function with given fields: ctx, options
func (_m *Connector) Connect(ctx context.Context, options *ftpclient.ConnectorOptions) (connection.Connection, error) {
	ret := _m.Called(ctx, options)

	var r0 connection.Connection
	if rf, ok := ret.Get(0).(func(context.Context, *ftpclient.ConnectorOptions) connection.Connection); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connection.Connection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ftpclient.ConnectorOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConnector interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnector creates a new instance of Connector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnector(t mockConstructorTestingTNewConnector) *Connector {
	mock := &Connector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
