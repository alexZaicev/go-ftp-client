// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/alexZaicev/go-ftp-client/internal/domain/entities"
	ftp "github.com/alexZaicev/go-ftp-client/internal/usecases/ftp"

	mock "github.com/stretchr/testify/mock"
)

// StatusUseCase is an autogenerated mock type for the StatusUseCase type
type StatusUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *StatusUseCase) Execute(_a0 context.Context, _a1 *ftp.StatusRepos, _a2 *ftp.StatusInput) (*entities.Status, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *entities.Status
	if rf, ok := ret.Get(0).(func(context.Context, *ftp.StatusRepos, *ftp.StatusInput) *entities.Status); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ftp.StatusRepos, *ftp.StatusInput) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStatusUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewStatusUseCase creates a new instance of StatusUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStatusUseCase(t mockConstructorTestingTNewStatusUseCase) *StatusUseCase {
	mock := &StatusUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
